name: Build APK (Buildozer)

on:
  workflow_dispatch:           # permite rodar manualmente
  push:
    branches: [ main, master ] # roda ao fazer push na branch principal

jobs:
  build-apk:
    runs-on: ubuntu-latest

    env:
      # >>>>>>>>>> AJUSTE AQUI SE PRECISAR <<<<<<<<<<
      # Se o app está na raiz do repo: "."
      # Se está em uma subpasta: "NOME-DA-PASTA"
      APP_DIR: "."
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_HOME: ${{ github.workspace }}/android-sdk

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup Java (JDK 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Mostrar estrutura do repositório
        run: |
          sudo apt-get update && sudo apt-get install -y tree || true
          echo "Raiz do repositório:"
          tree -L 2 || true
          echo
          echo "Conteúdo da pasta do app: $APP_DIR"
          ls -la "$APP_DIR"

      - name: Instalar dependências de sistema
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential git unzip zip autoconf automake libtool pkg-config \
            libffi-dev libssl-dev libbz2-dev libncurses5-dev libsqlite3-dev \
            libreadline-dev liblzma-dev zlib1g-dev libgdbm-dev libnss3-dev curl

      - name: Instalar Buildozer + Cython
        run: |
          python -m pip install --upgrade pip
          # cython <3 evita bugs em algumas recipes p4a
          pip install "cython<3.0" buildozer

      # === Android SDK (cmdline-tools) + aceitar licenças + pacotes estáveis ===
      - name: Preparar Android SDK (cmdline-tools)
        run: |
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -fsSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdtools.zip
          unzip -q cmdtools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          rm cmdtools.zip
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH

      - name: Aceitar licenças e instalar pacotes Android (API 35 estável)
        run: |
          yes | sdkmanager --licenses
          sdkmanager --update
          sdkmanager "platform-tools" "platforms;android-35" "build-tools;35.0.0" "ndk;26.1.10909125"

      - name: Verificar aidl e build-tools
        run: |
          which aidl || true
          ls -la "$ANDROID_SDK_ROOT/build-tools/35.0.0" || true

      # (Opcional) Cache da pasta .buildozer para acelerar builds
      - name: Cache do .buildozer
        uses: actions/cache@v4
        with:
          path: |
            .buildozer
            ~/.buildozer
          key: buildozer-${{ runner.os }}-${{ hashFiles('**/buildozer.spec') }}
          restore-keys: |
            buildozer-${{ runner.os }}-

      # Ajusta seu buildozer.spec para não puxar preview/RC do SDK
      - name: Garantir configurações estáveis no buildozer.spec
        working-directory: ${{ env.APP_DIR }}
        run: |
          if [ ! -f buildozer.spec ]; then
            echo "ERRO: buildozer.spec não encontrado em $PWD"
            exit 2
          fi
          # requirements mínimos para exemplo; mantenha os seus se já tem:
          if ! grep -q '^requirements' buildozer.spec; then
            echo 'requirements = python3,kivy' >> buildozer.spec
          fi
          # alinhar versões de API/NDK para evitar build-tools 36.1-rc1
          grep -q '^android.api' buildozer.spec && sed -i 's/^android\.api\s*=.*/android.api = 35/' buildozer.spec || echo 'android.api = 35' >> buildozer.spec
          grep -q '^android.minapi' buildozer.spec && sed -i 's/^android\.minapi\s*=.*/android.minapi = 23/' buildozer.spec || echo 'android.minapi = 23' >> buildozer.spec
          # NDK 26 é recomendado para p4a recente
          grep -q '^android.ndk' buildozer.spec && sed -i 's/^android\.ndk\s*=.*/android.ndk = 26b/' buildozer.spec || echo 'android.ndk = 26b' >> buildozer.spec
          # compilar apenas arm64 para agilizar
          if grep -q '^archs' buildozer.spec; then
            sed -i 's/^archs.*/archs = arm64-v8a/' buildozer.spec
          else
            echo 'archs = arm64-v8a' >> buildozer.spec
          fi
          echo "buildozer.spec final:"
          grep -E '^(requirements|android\.api|android\.minapi|android\.ndk|archs)' buildozer.spec || true

      - name: Build (APK debug)
        working-directory: ${{ env.APP_DIR }}
        env:
          CI: "1"
        run: |
          buildozer android clean || true
          buildozer -v android debug

      - name: Publicar APK como artefato
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ddtankbot-apk
          path: ${{ env.APP_DIR }}/bin/*.apk
          if-no-files-found: warn
